// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name WebitelSdkIos
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public protocol ChatClient {
  func getServiceDialog(completion: @escaping (Swift.Result<any WebitelSdkIos.Dialog, Foundation.NSError>) -> Swift.Void)
}
public struct RequestParams {
}
@_hasMissingDesignatedInitializers public class FileTransferRequest {
  public class Builder {
    public init(stream: Foundation.InputStream, fileName: Swift.String, mimeType: Swift.String)
    convenience public init(stream: Foundation.InputStream, pid: Swift.String)
    public func transferListener(listener: WebitelSdkIos.UploadListener) -> WebitelSdkIos.FileTransferRequest.Builder
    public func sendId(_ id: Swift.String) -> WebitelSdkIos.FileTransferRequest.Builder
    public func build() -> WebitelSdkIos.FileTransferRequest
    @objc deinit
  }
  @objc deinit
}
public enum PushTokenType {
  case apns, fcm
  public static func == (a: WebitelSdkIos.PushTokenType, b: WebitelSdkIos.PushTokenType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ReplyMarkup : Swift.Hashable {
  public let noInput: Swift.Bool
  public let rows: [WebitelSdkIos.ButtonRow]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WebitelSdkIos.ReplyMarkup, b: WebitelSdkIos.ReplyMarkup) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ButtonRow : Swift.Hashable {
  public let buttons: [WebitelSdkIos.Button]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WebitelSdkIos.ButtonRow, b: WebitelSdkIos.ButtonRow) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Button : Swift.Hashable {
  public let text: Swift.String
  public let type: WebitelSdkIos.ButtonType
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WebitelSdkIos.Button, b: WebitelSdkIos.Button) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ButtonType : Swift.Hashable {
  case Url(url: Swift.String)
  case Postback(code: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WebitelSdkIos.ButtonType, b: WebitelSdkIos.ButtonType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ConnectState {
  case CONNECTING, READY, DISCONNECTED
  public static func == (a: WebitelSdkIos.ConnectState, b: WebitelSdkIos.ConnectState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ConnectListener : AnyObject {
  func onStateChanged(from: WebitelSdkIos.ConnectState, to: WebitelSdkIos.ConnectState)
}
public struct MediaUploadListener {
  public init(onStarted: @escaping () -> Swift.Void, onProgress: @escaping (Swift.Int64) -> Swift.Void, onCompleted: @escaping (Swift.String) -> Swift.Void, onFailed: @escaping (Foundation.NSError) -> Swift.Void)
}
public protocol Dialog {
  var id: Swift.String { get }
  var title: Swift.String { get }
  func sendMessage(options: WebitelSdkIos.Message.options, completion: @escaping (Swift.Result<WebitelSdkIos.Message, Foundation.NSError>) -> Swift.Void)
  func getHistory(params: WebitelSdkIos.RequestParams, completion: @escaping (Swift.Result<[WebitelSdkIos.Message], Foundation.NSError>) -> Swift.Void)
  func getHistory(completion: @escaping (Swift.Result<[WebitelSdkIos.Message], Foundation.NSError>) -> Swift.Void)
  func getUpdates(params: WebitelSdkIos.RequestParams, completion: @escaping (Swift.Result<[WebitelSdkIos.Message], Foundation.NSError>) -> Swift.Void)
  func getUpdates(completion: @escaping (Swift.Result<[WebitelSdkIos.Message], Foundation.NSError>) -> Swift.Void)
  @available(*, deprecated, message: "Use 'downloadFile(fileId: String, listener: DownloadLisener)->CancellationToken' insted")
  func downloadFile(fileId: Swift.String, observer: WebitelSdkIos.StreamObserver)
  func downloadFile(fileId: Swift.String, listener: WebitelSdkIos.DownloadLisener) -> any WebitelSdkIos.CancellationToken
  func downloadFile(fileId: Swift.String, offset: Swift.Int64, listener: WebitelSdkIos.DownloadLisener) -> any WebitelSdkIos.CancellationToken
  func sendFile(request: WebitelSdkIos.FileTransferRequest, completion: @escaping (Swift.Result<WebitelSdkIos.Message, Foundation.NSError>) -> Swift.Void) -> any WebitelSdkIos.CancellationToken
  func addListener(listener: any WebitelSdkIos.DialogListener)
  func removeListener(listener: any WebitelSdkIos.DialogListener)
  func removeAllListeners()
  func sendPostback(params: WebitelSdkIos.PostbackParams, completion: @escaping (Swift.Result<WebitelSdkIos.Message, Foundation.NSError>) -> Swift.Void)
}
public struct StreamObserver {
  public init(onNext: @escaping (Foundation.Data) -> Swift.Void, onCompleted: @escaping () -> Swift.Void, onFailed: @escaping (Foundation.NSError) -> Swift.Void)
}
public enum LogLevel : Swift.String, Swift.Codable, Swift.CaseIterable {
  case trace
  case debug
  case info
  case notice
  case warning
  case error
  case critical
  public init?(rawValue: Swift.String)
  public typealias AllCases = [WebitelSdkIos.LogLevel]
  public typealias RawValue = Swift.String
  public static var allCases: [WebitelSdkIos.LogLevel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public class RequestParamsBuilder {
  public init()
  public func setLimit(_ limit: Swift.Int32) -> Self
  public func setOffset(_ offset: Swift.Int64) -> Self
  public func build() -> WebitelSdkIos.RequestParams
  @objc deinit
}
public struct UploadListener {
  public init(onStarted: @escaping (Swift.String) -> Swift.Void, onProgress: @escaping (Swift.Int64) -> Swift.Void, onCompleted: @escaping () -> Swift.Void, onCanceled: @escaping () -> Swift.Void, onFailed: @escaping (Foundation.NSError) -> Swift.Void)
}
public struct Message : Swift.Hashable {
  public let id: Swift.Int64
  public let sendId: Swift.String
  public let text: Swift.String
  public let from: WebitelSdkIos.Member
  public let isIncoming: Swift.Bool
  public let date: Swift.Int64
  public let dialogId: Swift.String
  public let file: WebitelSdkIos.File?
  public let postback: WebitelSdkIos.Postback?
  public let replyMarkup: WebitelSdkIos.ReplyMarkup?
  public class options {
    public init()
    public func withText(_ text: Swift.String) -> Self
    public func withFile(inputStream: Foundation.InputStream, contentType: Swift.String, filename: Swift.String, listener: WebitelSdkIos.MediaUploadListener) -> Self
    public func sendId(_ id: Swift.String) -> Self
    @objc deinit
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WebitelSdkIos.Message, b: WebitelSdkIos.Message) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PostbackParams {
  public typealias Builder = (_ builder: WebitelSdkIos.PostbackParamsBuilder) -> Swift.Void
  public static func with(mid: Swift.Int64, text: Swift.String, code: Swift.String, builder builderBlock: (_ builder: WebitelSdkIos.PostbackParamsBuilder) -> Swift.Void) -> WebitelSdkIos.PostbackParams
  public static func with(mid: Swift.Int64, text: Swift.String, code: Swift.String) -> WebitelSdkIos.PostbackParams
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PostbackParamsBuilder {
  final public var sendId: Swift.String
  @objc deinit
}
public struct Member : Swift.Hashable {
  public let id: Swift.String
  public let name: Swift.String
  public let type: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WebitelSdkIos.Member, b: WebitelSdkIos.Member) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PortalClient {
  var chatClient: any WebitelSdkIos.ChatClient { get }
  func userLogin(user: WebitelSdkIos.User, completion: @escaping (Swift.Result<WebitelSdkIos.UserSession, Foundation.NSError>) -> Swift.Void)
  func userLogout(completion: @escaping (Swift.Result<Swift.Void, Foundation.NSError>) -> Swift.Void)
  func getUserSession(completion: @escaping (Swift.Result<WebitelSdkIos.UserSession, Foundation.NSError>) -> Swift.Void)
  func registerDevice(pushToken: Swift.String, completion: @escaping (Swift.Result<Swift.Void, Foundation.NSError>) -> Swift.Void)
  func registerDevice(pushToken: Swift.String, pushTokenType: WebitelSdkIos.PushTokenType, completion: @escaping (Swift.Result<Swift.Void, Foundation.NSError>) -> Swift.Void)
  func setAccessToken(token: Swift.String)
  func getConnectState() -> WebitelSdkIos.ConnectState
  func addConnectListener(listener: any WebitelSdkIos.ConnectListener)
  func removeConnectListener(listener: any WebitelSdkIos.ConnectListener)
  func openConnect()
  func closeConnect()
}
public class PortalClientBuilder {
  public init(address: Swift.String, token: Swift.String)
  public func setName(_ value: Swift.String) -> Self
  public func setVersion(_ value: Swift.String) -> Self
  public func setDeviceId(_ value: Swift.String) -> Self
  public func logLevel(_ value: WebitelSdkIos.LogLevel) -> Self
  public func build() throws -> any WebitelSdkIos.PortalClient
  @objc deinit
}
public class User {
  public init(name: Swift.String)
  @objc deinit
}
public struct File : Swift.Hashable {
  public let id: Swift.String
  public let fileName: Swift.String
  public let type: Swift.String
  public let size: Swift.Int64
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WebitelSdkIos.File, b: WebitelSdkIos.File) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Postback : Swift.Hashable {
  public let text: Swift.String
  public let mid: Swift.Int64
  public let code: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WebitelSdkIos.Postback, b: WebitelSdkIos.Postback) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct DownloadLisener {
  public init(onData: @escaping (Foundation.Data) -> Swift.Void, onCompleted: @escaping () -> Swift.Void, onCanceled: @escaping () -> Swift.Void, onFailed: @escaping (Foundation.NSError) -> Swift.Void)
}
public struct UserSession {
  public let isChatAvailable: Swift.Bool
  public let isVoiceAvailable: Swift.Bool
}
public protocol VoiceClient {
}
public protocol DialogListener : AnyObject {
  func onNewMessage(_ message: WebitelSdkIos.Message)
}
public enum InvalidStateException : Swift.Error {
  case invalidState(message: Swift.String)
}
public protocol CancellationToken {
  func cancel(cleanUp: Swift.Bool) throws
  func cancel() throws
}
extension WebitelSdkIos.PushTokenType : Swift.Equatable {}
extension WebitelSdkIos.PushTokenType : Swift.Hashable {}
extension WebitelSdkIos.ConnectState : Swift.Equatable {}
extension WebitelSdkIos.ConnectState : Swift.Hashable {}
extension WebitelSdkIos.LogLevel : Swift.Equatable {}
extension WebitelSdkIos.LogLevel : Swift.Hashable {}
extension WebitelSdkIos.LogLevel : Swift.RawRepresentable {}
